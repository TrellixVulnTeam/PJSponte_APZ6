{"version":3,"file":"ngx-bootstrap-spinner.js","sources":["../../../projects/ngx-bootstrap-spinner/src/lib/ngx-spinner.enum.ts","../../../projects/ngx-bootstrap-spinner/src/lib/ngx-spinner.service.ts","../../../projects/ngx-bootstrap-spinner/src/lib/ngx-spinner.component.ts","../../../projects/ngx-bootstrap-spinner/src/lib/safe-html.pipe.ts","../../../projects/ngx-bootstrap-spinner/src/lib/ngx-spinner.module.ts","../../../projects/ngx-bootstrap-spinner/src/public_api.ts","../../../projects/ngx-bootstrap-spinner/src/ngx-bootstrap-spinner.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEO,MAAM,QAAQ,GAAG;AACvB,IAAC,QAAQ,EAAE,oBAAoB;AAC/B,IAAC,aAAa,EAAE,MAAM;AACtB,IAAC,YAAY,EAAE,QAAQ;AACvB,IAAC,OAAO,EAAE,KAAK;AACf,CAAA,CAAC;AAEK,MAAM,eAAe,GAAG,SAAS,CAAC;AAEzC,MAca,UAAU;AACtB,IAaC,YAAY,IAA0B;AACvC,QAAG,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AAC7B,KAAE;AACF;AACA;AAAC,MCnCW,iBAAiB;AAC7B;AACG;AAEqB;AAEH;AAAS,IAM7B;AAAiB;AAEb;AAA+B;AAC5B;AAEE;AAAa;AACqB,QAXnC,sBAAiB,GAAG,IAAI,eAAe,CAAa,IAAI,CAAC,CAAC;AACnE,KAIkB;AAClB;AACG;AACG;AAEH;AAAS,IAAX,UAAU,CAAC,IAAY;AAAK,QAC1B,OAAO,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAa,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC;AACtG,KAAE;AACF;AACG;AAEF;AAAQ;AAEH;AAAS,IAAd,IAAI,CAAC,OAAe,eAAe,EAAE,OAAiB;AACvD,QAAG,UAAU,CAAC;AACd,YAAK,MAAM,WAAW,GAAG,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,OAAO;AACtD,gBAAO,IAAI,OAAO,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE;AACnD,oBAAS,OAAO,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;AAChC,oBAAS,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,UAAU,iCAAM,OAAO,KAAE,IAAI,EAAE,IAAI,IAAG,CAAC,CAAC;AACjF,oBAAS,OAAO,CAAC,IAAI,CAAC,CAAC;AACvB,iBAAQ;AAAE,qBAAI;AACd,oBAAS,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;AAC3E,oBAAS,OAAO,CAAC,IAAI,CAAC,CAAC;AACvB,iBAAQ;AACR,aAAM,CAAC,CAAC;AACR,YAAK,OAAO,WAAW,CAAC;AACxB,SAAI,EAAE,EAAE,CAAC,CAAC;AACV,KAAE;AACF;AACG;AAED;AAAO;AAEF;AAAQ,IAAd,IAAI,CAAC,OAAe,eAAe,EAAE,WAAmB,EAAE;AAC3D,QAAG,UAAU,CAAC;AACd,YAAK,MAAM,WAAW,GAAG,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,OAAO;AACtD,gBAAO,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;AAC1E,gBAAO,OAAO,CAAC,IAAI,CAAC,CAAC;AACrB,aAAM,CAAC,CAAC;AACR,YAAK,OAAO,WAAW,CAAC;AACxB,SAAI,EAAE,QAAQ,CAAC,CAAC;AAChB,KAAE;AACF;0GACD;AAAE,kLAvDI;AAAE;CAHP,UAAU,SAAC,mBACV,UAAU,EAAE,MAAM,eACnB;;;;;gDAGY;AAAC;ACKd;AAEA,MAiBa,mBAAmB;AAAI;AAAS;AAG9B;AAAQ;AACW;AAC5B,IAkGJ,YAAoB,cAAiC,EAAU,cAAiC,EAAU,UAAsB;AACjI,QADqB,mBAAc,GAAd,cAAc,CAAmB;AAAE,QAAQ,mBAAc,GAAd,cAAc,CAAmB;AAAE,QAAQ,eAAU,GAAV,UAAU,CAAY;AAAE;AACzH;AACV;AACuC;AAC7B;AACG;AAAY;AACd,QAxCD,oBAAe,GAAY,KAAK,CAAC;AAE5C;AACO;AAEE;AAAY;AAGJ;AAAY;AAAa,QAA/B,sBAAiB,GAAY,KAAK,CAAC;AAE9C;AACO;AAEE;AAAY;AAEC;AAAa,QAAjC,YAAO,GAAe,IAAI,UAAU,EAAE,CAAC;AACxC;AACO;AAGR;AACM;AAEmB;AAAa,QAIpC,kBAAa,GAAkB,IAAI,OAAO,EAAE,CAAC;AAE/C;AACO;AAEP;AAAY;AAEC;AAAa,QA2CxB,sBAAiB,GAAG;AACrB,YAAG,IAAI,CAAC,OAAO,GAAG,IAAI,UAAU,CAAC;AACjC,gBAAK,IAAI,EAAE,IAAI,CAAC,IAAI;AACpB,gBAAK,OAAO,EAAE,IAAI,CAAC,OAAO;AAC1B,gBAAK,IAAI,EAAE,IAAI,CAAC,IAAI;AACpB,gBAAK,KAAK,EAAE,IAAI,CAAC,KAAK;AACtB,gBAAK,IAAI,EAAE,IAAI,CAAC,IAAI;AACpB,gBAAK,UAAU,EAAE,IAAI,CAAC,UAAU;AAChC,gBAAK,IAAI,EAAE,IAAI,CAAC,IAAI;AACpB,gBAAK,MAAM,EAAE,IAAI,CAAC,MAAM;AACxB,gBAAK,cAAc,EAAE,IAAI,CAAC,cAAc;AACxC,gBAAK,mBAAmB,EAAE,IAAI,CAAC,mBAAmB;AAClD,gBAAK,iBAAiB,EAAC,IAAI,CAAC,iBAAiB;AAC7C,aAAI,CAAC,CAAC;AACN,SAAE,CAAA;AACF,QAzDG,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,QAAQ,CAAC;AACpC,QAAG,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,OAAO,CAAC;AAClC,QAAG,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC;AACvC,QAAG,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC,YAAY,CAAC;AACrC,QAAG,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC;AACzB,QAAG,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;AAC1B,QAAG,IAAI,CAAC,IAAI,GAAG,eAAe,CAAC;AAC/B,QAAG,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;AAE/B,QAAI,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;AACrB,KAAE;AACF;AACG;AAEF;AAAQ;AAEH;AACN,IADC,QAAQ;AACT,QAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;AAC5B,QAAG,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,CAAC;AACxD,YAAK,IAAI,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,iBAAiB,EAAE;AACzD,gBAAO,IAAI,MAAM,GAAI,IAAI,CAAC,UAAU,CAAC,aAA6B,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AACrF,gBAAO,MAAM,CAAC,QAAQ,GAAG,CAAC,CAAC,IAAI,CAAC;AAChC,aAAM;AACN,SAAI,CAAC,CAAC;AACN,QAAG,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC;AAC5C,aAAM,IAAI,CACH,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,CAC9B;AACN,aAAM,SAAS,CAAC,CAAC,OAAmB;AACpC,YAAO,IAAI,CAAC,iBAAiB,EAAE,CAAC;AAChC,YAAO,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;AAC5C,YAAO,IAAI,OAAO,CAAC,IAAI,EAAE;AACzB,gBAAS,IAAI,CAAC,aAAa,EAAE,CAAC;AAC9B,aAAQ;AACR,YAAO,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC;AAC1C,SAAM,CAAC,CAAC;AACR,KAAE;AACF;AACG;AAEA;AAAQ;AAEH;AAAS,IAoBhB,WAAW,CAAC,OAA4C;AACzD,QAAG,KAAK,MAAM,QAAQ,IAAI,OAAO,EAAE;AACnC,YAAK,IAAI,QAAQ,EAAE;AACnB,gBAAO,MAAM,WAAW,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC7C,gBAAO,IAAI,WAAW,CAAC,aAAa,EAAE,EAAE;AACxC,oBAAS,OAAO;AAChB,iBAAQ;AAAE,qBAAI,IAAI,OAAO,WAAW,CAAC,YAAY,KAAK,WAAW,IAAI,WAAW,CAAC,YAAY,KAAK,WAAW,CAAC,aAAa,EAAE;AAC7H,oBAAS,IAAI,WAAW,CAAC,YAAY,KAAK,EAAE,EAAE;AAC9C,wBAAW,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,WAAW,CAAC,YAAY,CAAC;AAC7D,qBAAU;AACV,iBAAQ;AACR,aAAM;AACN,SAAI;AACJ,KAAE;AACF;AACG;AAEF;AAAQ;AAEH;AAAS,IAAd,QAAQ,CAAC,IAAY,EAAE,IAAU;AAAK,QACpC,IAAI,SAAS,GAAG,EAAE,CAAC;AACtB,QAAG,QAAQ,IAAI,CAAC,WAAW,EAAE;AAC7B,YAAK,KAAK,OAAO;AACjB,gBAAO,SAAS,GAAG,IAAI,CAAC;AACxB,gBAAO,MAAM;AACb,YAAK;AACL,gBAAO,MAAM;AACb,SAAI;AACJ,QAAG,IAAI,SAAS,IAAI,EAAE;AACtB,YAAK,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC,CAAC;AAChC;AACK,YAAA,OAAO,CAAC,UAAU,GAAG,IAAI,EAAE,UAAU,GAAG,IAAI,GAAG,GAAG,GAAG,SAAS,CAAC,CAAC;AACrE,KAAE;AACF;AACG;AAEF;AAAQ;AAEH;AAAS,IAAd,aAAa;AACd,QAAG,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAC5E,KAAE;AACF;AACG;AAEF;AAAQ;AAEH;AAAS,IAAd,WAAW;AACZ,QAAG,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;AAC7B,QAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;AACjC,KAAE;AACF;iDAzOA,SAAS,SAAC,mBACT,QAAQ,EAAE,uBAAuB,mBACjC;+gCAAyC,mBAEzC,eAAe,EAAE,uBAAuB,CAAC,MAAM;qCAYhD;;;;;;;wOACK;AAAE;AAA8C,YAvB7C,iBAAiB;AAAK,YAH7B,iBAAiB;AAChB,YAAD,UAAU;AACT;AAAI;AACgB,sBA8BpB,KAAK;AAAM,mBAMX,KAAK;AAAM,oBAMX,KAAK;AAAM,mBAMX,KAAK;AAAM,yBAMX,KAAK;AAAM,mBAMX,KAAK;AAAM,qBAMX,KAAK;AAAM,6BAMX,KAAK;AAAM,0BAMX,KAAK;AAAM,kCAMX,KAAK;AAAM,8BAQX,KAAK;AAAM,gCAQX,KAAK;AAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAE;AAAC;AAAC,MCzGJ,YAAY;AAAI,IAE3B,YAAoB,UAAwB;AAC7C,QADqB,eAAU,GAAV,UAAU,CAAc;AAAE,KAC7C;AAEH,IAAE,SAAS,CAAC,CAAS;AAAK,QACtB,IAAI,CAAC,EAAE;AACV,YAAK,OAAO,IAAI,CAAC,UAAU,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC;AACvD,SAAI;AACJ,KAAE;AACF;0CAbA,IAAI,SAAC,mBACJ,IAAI,EAAE,UAAU,eACjB;6GACK;AAAE;AAAuC,YANtC,YAAY;AAAI;;;;;;6EAAE;AAAC;AAAC,MCYhB,gBAAgB;AAAI;8CAPhC,QAAQ,SAAC,mBACR,OAAO,EAAE;UACP,YAAY,mBACb,mBACD,YAAY,EAAE,CAAC;GAAmB,EAAE,YAAY,CAAC,mBACjD,OAAO,EAAE,CAAC,mBAAmB,CAAC,eAC/B;;;;;;;;;;;4SACK;AAAC;ACZP;AACC;AACC;AACA;ACHF;AACC;AACC;AAED;AAAC;AAE0D","sourcesContent":["export type LOADERS = 'border' | 'grow';\n\nexport const DEFAULTS = {\n  BD_COLOR: 'rgba(51,51,51,0.8)',\n  SPINNER_COLOR: '#fff',\n  SPINNER_TYPE: 'border',\n  Z_INDEX: 99999,\n};\n\nexport const PRIMARY_SPINNER = 'primary';\n\nexport type Size = 'default' | 'small';\n\nexport interface Spinner {\n  bdColor?: string;\n  size?: Size;\n  color?: string;\n  type?: string;\n  fullScreen?: boolean;\n  zIndex?: number;\n  loaderTemplate?: string;\n  loadingTextTemplate?:string;\n  autoDisableButton?:boolean;\n}\n\nexport class NgxSpinner {\n  name: string;\n  bdColor: string;\n  size: Size;\n  color: string;\n  type: string;\n  class: string[];\n  fullScreen: boolean;\n  show: boolean;\n  zIndex: number;\n  loaderTemplate: string;\n  loadingTextTemplate:string;\n  autoDisableButton:boolean;\n\n  constructor(init?: Partial<NgxSpinner>) {\n    Object.assign(this, init);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { NgxSpinner, PRIMARY_SPINNER, Spinner } from './ngx-spinner.enum';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxSpinnerService {\n  /**\n   * Spinner observable\n   *\n   * @memberof NgxSpinnerService\n   */\n  // private spinnerObservable = new ReplaySubject<NgxSpinner>(1);\n  private spinnerObservable = new BehaviorSubject<NgxSpinner>(null);\n  /**\n   * Creates an instance of NgxSpinnerService.\n   * @memberof NgxSpinnerService\n   */\n  constructor() { }\n  /**\n  * Get subscription of desired spinner\n  * @memberof NgxSpinnerService\n  **/\n  getSpinner(name: string): Observable<NgxSpinner> {\n    return this.spinnerObservable.asObservable().pipe(filter((x: NgxSpinner) => x && x.name === name));\n  }\n  /**\n   * To show spinner\n   *\n   * @memberof NgxSpinnerService\n   */\n  show(name: string = PRIMARY_SPINNER, spinner?: Spinner) {\n    setTimeout(() => {\n      const showPromise = new Promise((resolve, _reject) => {\n        if (spinner && Object.keys(spinner).length) {\n          spinner['name'] = name;\n          this.spinnerObservable.next(new NgxSpinner({ ...spinner, show: true }));\n          resolve(true);\n        } else {\n          this.spinnerObservable.next(new NgxSpinner({ name, show: true }));\n          resolve(true);\n        }\n      });\n      return showPromise;\n    }, 10);\n  }\n  /**\n  * To hide spinner\n  *\n  * @memberof NgxSpinnerService\n  */\n  hide(name: string = PRIMARY_SPINNER, debounce: number = 10) {\n    setTimeout(() => {\n      const hidePromise = new Promise((resolve, _reject) => {\n        this.spinnerObservable.next(new NgxSpinner({ name, show: false }));\n        resolve(true);\n      });\n      return hidePromise;\n    }, debounce);\n  }\n}\n","import {\n  Component,\n  OnDestroy,\n  Input,\n  OnInit,\n  OnChanges,\n  SimpleChange,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  ElementRef\n} from '@angular/core';\nimport { NgxSpinnerService } from './ngx-spinner.service';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { DEFAULTS, Size, NgxSpinner, PRIMARY_SPINNER, LOADERS } from './ngx-spinner.enum';\n// import { trigger, state, style, transition, animate } from '@angular/animations';\n\n@Component({\n  selector: 'ngx-bootstrap-spinner',\n  templateUrl: 'ngx-spinner.component.html',\n  styleUrls: ['ngx-spinner.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  // animations: [\n  //   trigger('fadeIn', [\n  //     state('in', style({ opacity: 1 })),\n  //     transition(':enter', [\n  //       style({ opacity: 0 }),\n  //       animate(300)\n  //     ]),\n  //     transition(':leave',\n  //       animate(200, style({ opacity: 0 })))\n  //   ])\n  // ]\n})\nexport class NgxSpinnerComponent implements OnDestroy, OnInit, OnChanges {\n\n  /**\n   * To set backdrop color\n   * Only supports RGBA color format\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() bdColor: string;\n  /**\n   * To set spinner size\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() size: Size;\n  /**\n   * To set spinner color(DEFAULTS.SPINNER_COLOR)\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() color: string;\n  /**\n   * To set type of spinner\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() type: string;\n  /**\n   * To toggle fullscreen mode\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() fullScreen: boolean;\n  /**\n   * Spinner name\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() name: string;\n  /**\n   * z-index value\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() zIndex: number;\n  /**\n   * Custom loader for spinner/loader\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() loaderTemplate: string;\n  /**\n * display loading text\n *\n * @memberof NgxSpinnerComponent\n */\n  @Input() loadingText: string;\n  /**\n * Custom loading text Template for spinner/loader\n *\n * @memberof NgxSpinnerComponent\n */\n  @Input() loadingTextTemplate: string;\n  /**\n   * button Spinner.\n   * https://getbootstrap.com/docs/4.4/components/spinners/#buttons\n   *\n   * @memberof NgxSpinnerComponent\n   *\n   */\n  @Input() isButtonSpinner: boolean = false;\n\n  /**\n   * isButtonSpinner is true and when the spinner shown,the button disabled set to true\n   *\n   * @memberof NgxSpinnerComponent\n   *\n   */\n  @Input() autoDisableButton: boolean = false;\n\n  /**\n   * Spinner Object\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  spinner: NgxSpinner = new NgxSpinner();\n  /**\n   * Show spinner\n   *\n   * @memberof NgxSpinnerComponent\n  **/\n  show: boolean;\n  /**\n   * Unsubscribe from spinner's observable\n   *\n   * @memberof NgxSpinnerComponent\n  **/\n  ngUnsubscribe: Subject<void> = new Subject();\n\n  /**\n   * Creates an instance of NgxSpinnerComponent.\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  constructor(private spinnerService: NgxSpinnerService, private changeDetector: ChangeDetectorRef, private elementRef: ElementRef) {\n    this.bdColor = DEFAULTS.BD_COLOR;\n    this.zIndex = DEFAULTS.Z_INDEX;\n    this.color = DEFAULTS.SPINNER_COLOR;\n    this.type = DEFAULTS.SPINNER_TYPE;\n    this.size = 'default';\n    this.fullScreen = true;\n    this.name = PRIMARY_SPINNER;\n    this.loaderTemplate = null;\n\n    this.show = false;\n  }\n  /**\n   * Initialization method\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  ngOnInit() {\n    this.setDefaultOptions();\n    this.spinnerService.getSpinner(this.name).subscribe(x => {\n      if (this.isButtonSpinner && this.autoDisableButton) {\n        let button = (this.elementRef.nativeElement as HTMLElement).closest(\"button\");\n        button.disabled = x.show;\n      }\n    });\n    this.spinnerService.getSpinner(this.name)\n      .pipe(\n        takeUntil(this.ngUnsubscribe)\n      )\n      .subscribe((spinner: NgxSpinner) => {\n        this.setDefaultOptions();\n        Object.assign(this.spinner, spinner);\n        if (spinner.show) {\n          this.onInputChange();\n        }\n        this.changeDetector.markForCheck();\n      });\n  }\n  /**\n   * To set default ngx-spinner options\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  setDefaultOptions = () => {\n    this.spinner = new NgxSpinner({\n      name: this.name,\n      bdColor: this.bdColor,\n      size: this.size,\n      color: this.color,\n      type: this.type,\n      fullScreen: this.fullScreen,\n      show: this.show,\n      zIndex: this.zIndex,\n      loaderTemplate: this.loaderTemplate,\n      loadingTextTemplate: this.loadingTextTemplate,\n      autoDisableButton:this.autoDisableButton\n    });\n  }\n  /**\n   * On changes event for input variables\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  ngOnChanges(changes: { [propKey: string]: SimpleChange }) {\n    for (const propName in changes) {\n      if (propName) {\n        const changedProp = changes[propName];\n        if (changedProp.isFirstChange()) {\n          return;\n        } else if (typeof changedProp.currentValue !== 'undefined' && changedProp.currentValue !== changedProp.previousValue) {\n          if (changedProp.currentValue !== '') {\n            this.spinner[propName] = changedProp.currentValue;\n          }\n        }\n      }\n    }\n  }\n  /**\n   * To get class for spinner\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  getClass(type: string, size: Size): string[] {\n    let sizeClass = '';\n    switch (size.toLowerCase()) {\n      case 'small':\n        sizeClass = 'sm';\n        break;\n      default:\n        break;\n    }\n    if (sizeClass == '')\n      return ['spinner-' + type];\n    else\n      return ['spinner-' + type, 'spinner-' + type + '-' + sizeClass];\n  }\n  /**\n   * Check if input variables have changed\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  onInputChange() {\n    this.spinner.class = this.getClass(this.spinner.type, this.spinner.size);\n  }\n  /**\n   * Component destroy event\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  ngOnDestroy() {\n    this.ngUnsubscribe.next();\n    this.ngUnsubscribe.complete();\n  }\n}\n","import { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'safeHtml'\n})\nexport class SafeHtmlPipe implements PipeTransform {\n\n  constructor(private _sanitizer: DomSanitizer) {\n  }\n\n  transform(v: string): SafeHtml {\n    if (v) {\n      return this._sanitizer.bypassSecurityTrustHtml(v);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgxSpinnerComponent } from './ngx-spinner.component';\nimport { SafeHtmlPipe } from './safe-html.pipe';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [NgxSpinnerComponent, SafeHtmlPipe],\n  exports: [NgxSpinnerComponent]\n})\nexport class NgxSpinnerModule { }\n","/*\n * Public API Surface of ngx-bootstrap-spinner\n */\nexport * from './lib/ngx-spinner.service';\nexport * from './lib/ngx-spinner.component';\nexport * from './lib/ngx-spinner.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {SafeHtmlPipe as ɵa} from './lib/safe-html.pipe';"]}