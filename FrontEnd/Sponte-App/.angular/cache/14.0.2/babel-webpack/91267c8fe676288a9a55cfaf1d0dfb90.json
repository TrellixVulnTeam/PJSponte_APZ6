{"ast":null,"code":"import { ɵɵdefineInjectable, Injectable, Component, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, Input, Pipe, NgModule } from '@angular/core';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/platform-browser';\n\nfunction NgxSpinnerComponent_div_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction NgxSpinnerComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 3);\n    ɵngcc0.ɵɵtemplate(1, NgxSpinnerComponent_div_0_ng_container_1_Template, 1, 0, \"ng-container\", 4);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n\n    const _r2 = ɵngcc0.ɵɵreference(3);\n\n    ɵngcc0.ɵɵstyleProp(\"background-color\", ctx_r0.spinner.bdColor)(\"z-index\", ctx_r0.spinner.zIndex)(\"position\", ctx_r0.spinner.fullScreen ? \"fixed\" : \"absolute\")(\"color\", ctx_r0.spinner.color);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", _r2);\n  }\n}\n\nfunction NgxSpinnerComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0, 5);\n  }\n\n  if (rf & 2) {\n    ɵngcc0.ɵɵnextContext();\n\n    const _r2 = ɵngcc0.ɵɵreference(3);\n\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", _r2);\n  }\n}\n\nfunction NgxSpinnerComponent_ng_template_2_span_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 9)(1, \"span\", 10);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r5.spinner.class);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r5.loadingText);\n  }\n}\n\nfunction NgxSpinnerComponent_ng_template_2_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 11);\n    ɵngcc0.ɵɵpipe(1, \"safeHtml\");\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"innerHTML\", ɵngcc0.ɵɵpipeBind1(1, 1, ctx_r6.loaderTemplate), ɵngcc0.ɵɵsanitizeHtml);\n  }\n}\n\nconst _c0 = function (a0, a1) {\n  return {\n    \"sr-only\": a0,\n    \"loading-text\": a1\n  };\n};\n\nfunction NgxSpinnerComponent_ng_template_2_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 12);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(2, _c0, ctx_r7.isButtonSpinner, !ctx_r7.isButtonSpinner));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r7.loadingText, \" \");\n  }\n}\n\nfunction NgxSpinnerComponent_ng_template_2_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 11);\n    ɵngcc0.ɵɵpipe(1, \"safeHtml\");\n  }\n\n  if (rf & 2) {\n    const ctx_r8 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"innerHTML\", ɵngcc0.ɵɵpipeBind1(1, 1, ctx_r8.loadingTextTemplate), ɵngcc0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction NgxSpinnerComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, NgxSpinnerComponent_ng_template_2_span_0_Template, 3, 2, \"span\", 6);\n    ɵngcc0.ɵɵtemplate(1, NgxSpinnerComponent_ng_template_2_div_1_Template, 2, 3, \"div\", 7);\n    ɵngcc0.ɵɵtemplate(2, NgxSpinnerComponent_ng_template_2_div_2_Template, 2, 5, \"div\", 8);\n    ɵngcc0.ɵɵtext(3);\n    ɵngcc0.ɵɵtemplate(4, NgxSpinnerComponent_ng_template_2_div_4_Template, 2, 3, \"div\", 7);\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r3.loaderTemplate);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r3.loaderTemplate);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r3.loadingTextTemplate);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r3.isButtonSpinner && !ctx_r3.loadingTextTemplate ? ctx_r3.loadingText : \"\", \" \");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r3.loadingTextTemplate);\n  }\n}\n\nconst DEFAULTS = {\n  BD_COLOR: 'rgba(51,51,51,0.8)',\n  SPINNER_COLOR: '#fff',\n  SPINNER_TYPE: 'border',\n  Z_INDEX: 99999\n};\nconst PRIMARY_SPINNER = 'primary';\n\nclass NgxSpinner {\n  constructor(init) {\n    Object.assign(this, init);\n  }\n\n}\n\nclass NgxSpinnerService {\n  /**\r\n   * Creates an instance of NgxSpinnerService.\r\n   * @memberof NgxSpinnerService\r\n   */\n  constructor() {\n    /**\r\n     * Spinner observable\r\n     *\r\n     * @memberof NgxSpinnerService\r\n     */\n    // private spinnerObservable = new ReplaySubject<NgxSpinner>(1);\n    this.spinnerObservable = new BehaviorSubject(null);\n  }\n  /**\r\n  * Get subscription of desired spinner\r\n  * @memberof NgxSpinnerService\r\n  **/\n\n\n  getSpinner(name) {\n    return this.spinnerObservable.asObservable().pipe(filter(x => x && x.name === name));\n  }\n  /**\r\n   * To show spinner\r\n   *\r\n   * @memberof NgxSpinnerService\r\n   */\n\n\n  show(name = PRIMARY_SPINNER, spinner) {\n    setTimeout(() => {\n      const showPromise = new Promise((resolve, _reject) => {\n        if (spinner && Object.keys(spinner).length) {\n          spinner['name'] = name;\n          this.spinnerObservable.next(new NgxSpinner(Object.assign(Object.assign({}, spinner), {\n            show: true\n          })));\n          resolve(true);\n        } else {\n          this.spinnerObservable.next(new NgxSpinner({\n            name,\n            show: true\n          }));\n          resolve(true);\n        }\n      });\n      return showPromise;\n    }, 10);\n  }\n  /**\r\n  * To hide spinner\r\n  *\r\n  * @memberof NgxSpinnerService\r\n  */\n\n\n  hide(name = PRIMARY_SPINNER, debounce = 10) {\n    setTimeout(() => {\n      const hidePromise = new Promise((resolve, _reject) => {\n        this.spinnerObservable.next(new NgxSpinner({\n          name,\n          show: false\n        }));\n        resolve(true);\n      });\n      return hidePromise;\n    }, debounce);\n  }\n\n}\n\nNgxSpinnerService.ɵfac = function NgxSpinnerService_Factory(t) {\n  return new (t || NgxSpinnerService)();\n};\n\nNgxSpinnerService.ɵprov = ɵɵdefineInjectable({\n  factory: function NgxSpinnerService_Factory() {\n    return new NgxSpinnerService();\n  },\n  token: NgxSpinnerService,\n  providedIn: \"root\"\n});\n\nNgxSpinnerService.ctorParameters = () => [];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxSpinnerService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})(); // import { trigger, state, style, transition, animate } from '@angular/animations';\n\n\nclass NgxSpinnerComponent {\n  /**\r\n   * Creates an instance of NgxSpinnerComponent.\r\n   *\r\n   * @memberof NgxSpinnerComponent\r\n   */\n  constructor(spinnerService, changeDetector, elementRef) {\n    this.spinnerService = spinnerService;\n    this.changeDetector = changeDetector;\n    this.elementRef = elementRef;\n    /**\r\n     * button Spinner.\r\n     * https://getbootstrap.com/docs/4.4/components/spinners/#buttons\r\n     *\r\n     * @memberof NgxSpinnerComponent\r\n     *\r\n     */\n\n    this.isButtonSpinner = false;\n    /**\r\n     * isButtonSpinner is true and when the spinner shown,the button disabled set to true\r\n     *\r\n     * @memberof NgxSpinnerComponent\r\n     *\r\n     */\n\n    this.autoDisableButton = false;\n    /**\r\n     * Spinner Object\r\n     *\r\n     * @memberof NgxSpinnerComponent\r\n     */\n\n    this.spinner = new NgxSpinner();\n    /**\r\n     * Unsubscribe from spinner's observable\r\n     *\r\n     * @memberof NgxSpinnerComponent\r\n    **/\n\n    this.ngUnsubscribe = new Subject();\n    /**\r\n     * To set default ngx-spinner options\r\n     *\r\n     * @memberof NgxSpinnerComponent\r\n     */\n\n    this.setDefaultOptions = () => {\n      this.spinner = new NgxSpinner({\n        name: this.name,\n        bdColor: this.bdColor,\n        size: this.size,\n        color: this.color,\n        type: this.type,\n        fullScreen: this.fullScreen,\n        show: this.show,\n        zIndex: this.zIndex,\n        loaderTemplate: this.loaderTemplate,\n        loadingTextTemplate: this.loadingTextTemplate,\n        autoDisableButton: this.autoDisableButton\n      });\n    };\n\n    this.bdColor = DEFAULTS.BD_COLOR;\n    this.zIndex = DEFAULTS.Z_INDEX;\n    this.color = DEFAULTS.SPINNER_COLOR;\n    this.type = DEFAULTS.SPINNER_TYPE;\n    this.size = 'default';\n    this.fullScreen = true;\n    this.name = PRIMARY_SPINNER;\n    this.loaderTemplate = null;\n    this.show = false;\n  }\n  /**\r\n   * Initialization method\r\n   *\r\n   * @memberof NgxSpinnerComponent\r\n   */\n\n\n  ngOnInit() {\n    this.setDefaultOptions();\n    this.spinnerService.getSpinner(this.name).subscribe(x => {\n      if (this.isButtonSpinner && this.autoDisableButton) {\n        let button = this.elementRef.nativeElement.closest(\"button\");\n        button.disabled = x.show;\n      }\n    });\n    this.spinnerService.getSpinner(this.name).pipe(takeUntil(this.ngUnsubscribe)).subscribe(spinner => {\n      this.setDefaultOptions();\n      Object.assign(this.spinner, spinner);\n\n      if (spinner.show) {\n        this.onInputChange();\n      }\n\n      this.changeDetector.markForCheck();\n    });\n  }\n  /**\r\n   * On changes event for input variables\r\n   *\r\n   * @memberof NgxSpinnerComponent\r\n   */\n\n\n  ngOnChanges(changes) {\n    for (const propName in changes) {\n      if (propName) {\n        const changedProp = changes[propName];\n\n        if (changedProp.isFirstChange()) {\n          return;\n        } else if (typeof changedProp.currentValue !== 'undefined' && changedProp.currentValue !== changedProp.previousValue) {\n          if (changedProp.currentValue !== '') {\n            this.spinner[propName] = changedProp.currentValue;\n          }\n        }\n      }\n    }\n  }\n  /**\r\n   * To get class for spinner\r\n   *\r\n   * @memberof NgxSpinnerComponent\r\n   */\n\n\n  getClass(type, size) {\n    let sizeClass = '';\n\n    switch (size.toLowerCase()) {\n      case 'small':\n        sizeClass = 'sm';\n        break;\n\n      default:\n        break;\n    }\n\n    if (sizeClass == '') return ['spinner-' + type];else return ['spinner-' + type, 'spinner-' + type + '-' + sizeClass];\n  }\n  /**\r\n   * Check if input variables have changed\r\n   *\r\n   * @memberof NgxSpinnerComponent\r\n   */\n\n\n  onInputChange() {\n    this.spinner.class = this.getClass(this.spinner.type, this.spinner.size);\n  }\n  /**\r\n   * Component destroy event\r\n   *\r\n   * @memberof NgxSpinnerComponent\r\n   */\n\n\n  ngOnDestroy() {\n    this.ngUnsubscribe.next();\n    this.ngUnsubscribe.complete();\n  }\n\n}\n\nNgxSpinnerComponent.ɵfac = function NgxSpinnerComponent_Factory(t) {\n  return new (t || NgxSpinnerComponent)(ɵngcc0.ɵɵdirectiveInject(NgxSpinnerService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nNgxSpinnerComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: NgxSpinnerComponent,\n  selectors: [[\"ngx-bootstrap-spinner\"]],\n  inputs: {\n    isButtonSpinner: \"isButtonSpinner\",\n    autoDisableButton: \"autoDisableButton\",\n    bdColor: \"bdColor\",\n    zIndex: \"zIndex\",\n    color: \"color\",\n    type: \"type\",\n    size: \"size\",\n    fullScreen: \"fullScreen\",\n    name: \"name\",\n    loaderTemplate: \"loaderTemplate\",\n    loadingText: \"loadingText\",\n    loadingTextTemplate: \"loadingTextTemplate\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 4,\n  vars: 2,\n  consts: [[\"class\", \"overlay d-flex flex-column justify-content-center align-items-center\", 3, \"background-color\", \"z-index\", \"position\", \"color\", 4, \"ngIf\"], [3, \"ngTemplateOutlet\", 4, \"ngIf\"], [\"loadingTemplate\", \"\"], [1, \"overlay\", \"d-flex\", \"flex-column\", \"justify-content-center\", \"align-items-center\"], [4, \"ngTemplateOutlet\"], [3, \"ngTemplateOutlet\"], [\"role\", \"status\", \"aria-hidden\", \"true\", 3, \"ngClass\", 4, \"ngIf\"], [3, \"innerHTML\", 4, \"ngIf\"], [3, \"ngClass\", 4, \"ngIf\"], [\"role\", \"status\", \"aria-hidden\", \"true\", 3, \"ngClass\"], [1, \"sr-only\"], [3, \"innerHTML\"], [3, \"ngClass\"]],\n  template: function NgxSpinnerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, NgxSpinnerComponent_div_0_Template, 2, 9, \"div\", 0);\n      ɵngcc0.ɵɵtemplate(1, NgxSpinnerComponent_ng_container_1_Template, 1, 1, \"ng-container\", 1);\n      ɵngcc0.ɵɵtemplate(2, NgxSpinnerComponent_ng_template_2_Template, 5, 5, \"ng-template\", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.isButtonSpinner && ctx.spinner.show);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.isButtonSpinner && ctx.spinner.show);\n    }\n  },\n  dependencies: function () {\n    return [ɵngcc1.NgClass, ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet, SafeHtmlPipe];\n  },\n  styles: [\".overlay[_ngcontent-%COMP%]{height:100%;left:0;position:fixed;top:0;width:100%}\"],\n  changeDetection: 0\n});\n\nNgxSpinnerComponent.ctorParameters = () => [{\n  type: NgxSpinnerService\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: ElementRef\n}];\n\nNgxSpinnerComponent.propDecorators = {\n  bdColor: [{\n    type: Input\n  }],\n  size: [{\n    type: Input\n  }],\n  color: [{\n    type: Input\n  }],\n  type: [{\n    type: Input\n  }],\n  fullScreen: [{\n    type: Input\n  }],\n  name: [{\n    type: Input\n  }],\n  zIndex: [{\n    type: Input\n  }],\n  loaderTemplate: [{\n    type: Input\n  }],\n  loadingText: [{\n    type: Input\n  }],\n  loadingTextTemplate: [{\n    type: Input\n  }],\n  isButtonSpinner: [{\n    type: Input\n  }],\n  autoDisableButton: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxSpinnerComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-bootstrap-spinner',\n      template: \"<div *ngIf=\\\"!isButtonSpinner&&spinner.show\\\"\\r\\n  class=\\\"overlay d-flex flex-column justify-content-center align-items-center\\\"\\r\\n  [style.background-color]=\\\"spinner.bdColor\\\" [style.z-index]=\\\"spinner.zIndex\\\"\\r\\n  [style.position]=\\\"spinner.fullScreen ? 'fixed' : 'absolute'\\\" [style.color]=\\\"spinner.color\\\">\\r\\n  <ng-container *ngTemplateOutlet=\\\"loadingTemplate\\\"></ng-container>\\r\\n</div>\\r\\n\\r\\n<ng-container *ngIf=\\\"isButtonSpinner&&spinner.show\\\" [ngTemplateOutlet]=\\\"loadingTemplate\\\">\\r\\n</ng-container>\\r\\n\\r\\n<ng-template #loadingTemplate>\\r\\n  <span *ngIf=\\\"!loaderTemplate\\\" [ngClass]=\\\"spinner.class\\\" role=\\\"status\\\" aria-hidden=\\\"true\\\">\\r\\n    <span class=\\\"sr-only\\\">{{loadingText}}</span>\\r\\n  </span>\\r\\n  <div *ngIf=\\\"loaderTemplate\\\" [innerHTML]=\\\"loaderTemplate | safeHtml\\\"></div>\\r\\n  <div *ngIf=\\\"!loadingTextTemplate\\\" [ngClass]=\\\"{'sr-only': isButtonSpinner,'loading-text':!isButtonSpinner}\\\">\\r\\n    {{loadingText}}\\r\\n  </div>\\r\\n  {{isButtonSpinner&&!loadingTextTemplate?loadingText:\\\"\\\"}}\\r\\n  <div *ngIf=\\\"loadingTextTemplate\\\" [innerHTML]=\\\"loadingTextTemplate | safeHtml\\\"></div>\\r\\n</ng-template>\\r\\n\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".overlay{height:100%;left:0;position:fixed;top:0;width:100%}\"]\n    }]\n  }], function () {\n    return [{\n      type: NgxSpinnerService\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, {\n    isButtonSpinner: [{\n      type: Input\n    }],\n    autoDisableButton: [{\n      type: Input\n    }],\n    bdColor: [{\n      type: Input\n    }],\n    zIndex: [{\n      type: Input\n    }],\n    color: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    size: [{\n      type: Input\n    }],\n    fullScreen: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    loaderTemplate: [{\n      type: Input\n    }],\n    loadingText: [{\n      type: Input\n    }],\n    loadingTextTemplate: [{\n      type: Input\n    }]\n  });\n})();\n\nclass SafeHtmlPipe {\n  constructor(_sanitizer) {\n    this._sanitizer = _sanitizer;\n  }\n\n  transform(v) {\n    if (v) {\n      return this._sanitizer.bypassSecurityTrustHtml(v);\n    }\n  }\n\n}\n\nSafeHtmlPipe.ɵfac = function SafeHtmlPipe_Factory(t) {\n  return new (t || SafeHtmlPipe)(ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DomSanitizer, 16));\n};\n\nSafeHtmlPipe.ɵpipe = /*@__PURE__*/ɵngcc0.ɵɵdefinePipe({\n  name: \"safeHtml\",\n  type: SafeHtmlPipe,\n  pure: true\n});\n\nSafeHtmlPipe.ctorParameters = () => [{\n  type: DomSanitizer\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SafeHtmlPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'safeHtml'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc2.DomSanitizer\n    }];\n  }, null);\n})();\n\nclass NgxSpinnerModule {}\n\nNgxSpinnerModule.ɵfac = function NgxSpinnerModule_Factory(t) {\n  return new (t || NgxSpinnerModule)();\n};\n\nNgxSpinnerModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: NgxSpinnerModule\n});\nNgxSpinnerModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [CommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxSpinnerModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [NgxSpinnerComponent, SafeHtmlPipe],\n      exports: [NgxSpinnerComponent]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxSpinnerModule, {\n    declarations: function () {\n      return [NgxSpinnerComponent, SafeHtmlPipe];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [NgxSpinnerComponent];\n    }\n  });\n})();\n/*\r\n * Public API Surface of ngx-bootstrap-spinner\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { NgxSpinnerComponent, NgxSpinnerModule, NgxSpinnerService, SafeHtmlPipe as ɵa };","map":{"version":3,"names":["ɵɵdefineInjectable","Injectable","Component","ChangeDetectionStrategy","ChangeDetectorRef","ElementRef","Input","Pipe","NgModule","BehaviorSubject","Subject","filter","takeUntil","CommonModule","DomSanitizer","ɵngcc0","ɵngcc1","ɵngcc2","NgxSpinnerComponent_div_0_ng_container_1_Template","rf","ctx","ɵɵelementContainer","NgxSpinnerComponent_div_0_Template","ɵɵelementStart","ɵɵtemplate","ɵɵelementEnd","ctx_r0","ɵɵnextContext","_r2","ɵɵreference","ɵɵstyleProp","spinner","bdColor","zIndex","fullScreen","color","ɵɵadvance","ɵɵproperty","NgxSpinnerComponent_ng_container_1_Template","NgxSpinnerComponent_ng_template_2_span_0_Template","ɵɵtext","ctx_r5","class","ɵɵtextInterpolate","loadingText","NgxSpinnerComponent_ng_template_2_div_1_Template","ɵɵelement","ɵɵpipe","ctx_r6","ɵɵpipeBind1","loaderTemplate","ɵɵsanitizeHtml","_c0","a0","a1","NgxSpinnerComponent_ng_template_2_div_2_Template","ctx_r7","ɵɵpureFunction2","isButtonSpinner","ɵɵtextInterpolate1","NgxSpinnerComponent_ng_template_2_div_4_Template","ctx_r8","loadingTextTemplate","NgxSpinnerComponent_ng_template_2_Template","ctx_r3","DEFAULTS","BD_COLOR","SPINNER_COLOR","SPINNER_TYPE","Z_INDEX","PRIMARY_SPINNER","NgxSpinner","constructor","init","Object","assign","NgxSpinnerService","spinnerObservable","getSpinner","name","asObservable","pipe","x","show","setTimeout","showPromise","Promise","resolve","_reject","keys","length","next","hide","debounce","hidePromise","ɵfac","NgxSpinnerService_Factory","t","ɵprov","factory","token","providedIn","ctorParameters","ngDevMode","ɵsetClassMetadata","type","args","NgxSpinnerComponent","spinnerService","changeDetector","elementRef","autoDisableButton","ngUnsubscribe","setDefaultOptions","size","ngOnInit","subscribe","button","nativeElement","closest","disabled","onInputChange","markForCheck","ngOnChanges","changes","propName","changedProp","isFirstChange","currentValue","previousValue","getClass","sizeClass","toLowerCase","ngOnDestroy","complete","NgxSpinnerComponent_Factory","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","selectors","inputs","features","ɵɵNgOnChangesFeature","decls","vars","consts","template","NgxSpinnerComponent_Template","ɵɵtemplateRefExtractor","dependencies","NgClass","NgIf","NgTemplateOutlet","SafeHtmlPipe","styles","changeDetection","propDecorators","selector","OnPush","_sanitizer","transform","v","bypassSecurityTrustHtml","SafeHtmlPipe_Factory","ɵpipe","ɵɵdefinePipe","pure","NgxSpinnerModule","NgxSpinnerModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","declarations","exports","ngJitMode","ɵɵsetNgModuleScope","ɵa"],"sources":["C:/Projetos/01Pessoal/Dev/FrontEnd/Sponte-App/node_modules/ngx-bootstrap-spinner/__ivy_ngcc__/fesm2015/ngx-bootstrap-spinner.js"],"sourcesContent":["import { ɵɵdefineInjectable, Injectable, Component, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, Input, Pipe, NgModule } from '@angular/core';\r\nimport { BehaviorSubject, Subject } from 'rxjs';\r\nimport { filter, takeUntil } from 'rxjs/operators';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\nimport * as ɵngcc0 from '@angular/core';\r\nimport * as ɵngcc1 from '@angular/common';\r\nimport * as ɵngcc2 from '@angular/platform-browser';\r\n\r\nfunction NgxSpinnerComponent_div_0_ng_container_1_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵelementContainer(0);\r\n} }\r\nfunction NgxSpinnerComponent_div_0_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵelementStart(0, \"div\", 3);\r\n    ɵngcc0.ɵɵtemplate(1, NgxSpinnerComponent_div_0_ng_container_1_Template, 1, 0, \"ng-container\", 4);\r\n    ɵngcc0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\r\n    const _r2 = ɵngcc0.ɵɵreference(3);\r\n    ɵngcc0.ɵɵstyleProp(\"background-color\", ctx_r0.spinner.bdColor)(\"z-index\", ctx_r0.spinner.zIndex)(\"position\", ctx_r0.spinner.fullScreen ? \"fixed\" : \"absolute\")(\"color\", ctx_r0.spinner.color);\r\n    ɵngcc0.ɵɵadvance(1);\r\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", _r2);\r\n} }\r\nfunction NgxSpinnerComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵelementContainer(0, 5);\r\n} if (rf & 2) {\r\n    ɵngcc0.ɵɵnextContext();\r\n    const _r2 = ɵngcc0.ɵɵreference(3);\r\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", _r2);\r\n} }\r\nfunction NgxSpinnerComponent_ng_template_2_span_0_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵelementStart(0, \"span\", 9)(1, \"span\", 10);\r\n    ɵngcc0.ɵɵtext(2);\r\n    ɵngcc0.ɵɵelementEnd()();\r\n} if (rf & 2) {\r\n    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);\r\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r5.spinner.class);\r\n    ɵngcc0.ɵɵadvance(2);\r\n    ɵngcc0.ɵɵtextInterpolate(ctx_r5.loadingText);\r\n} }\r\nfunction NgxSpinnerComponent_ng_template_2_div_1_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵelement(0, \"div\", 11);\r\n    ɵngcc0.ɵɵpipe(1, \"safeHtml\");\r\n} if (rf & 2) {\r\n    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);\r\n    ɵngcc0.ɵɵproperty(\"innerHTML\", ɵngcc0.ɵɵpipeBind1(1, 1, ctx_r6.loaderTemplate), ɵngcc0.ɵɵsanitizeHtml);\r\n} }\r\nconst _c0 = function (a0, a1) { return { \"sr-only\": a0, \"loading-text\": a1 }; };\r\nfunction NgxSpinnerComponent_ng_template_2_div_2_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵelementStart(0, \"div\", 12);\r\n    ɵngcc0.ɵɵtext(1);\r\n    ɵngcc0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);\r\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(2, _c0, ctx_r7.isButtonSpinner, !ctx_r7.isButtonSpinner));\r\n    ɵngcc0.ɵɵadvance(1);\r\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r7.loadingText, \" \");\r\n} }\r\nfunction NgxSpinnerComponent_ng_template_2_div_4_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵelement(0, \"div\", 11);\r\n    ɵngcc0.ɵɵpipe(1, \"safeHtml\");\r\n} if (rf & 2) {\r\n    const ctx_r8 = ɵngcc0.ɵɵnextContext(2);\r\n    ɵngcc0.ɵɵproperty(\"innerHTML\", ɵngcc0.ɵɵpipeBind1(1, 1, ctx_r8.loadingTextTemplate), ɵngcc0.ɵɵsanitizeHtml);\r\n} }\r\nfunction NgxSpinnerComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵtemplate(0, NgxSpinnerComponent_ng_template_2_span_0_Template, 3, 2, \"span\", 6);\r\n    ɵngcc0.ɵɵtemplate(1, NgxSpinnerComponent_ng_template_2_div_1_Template, 2, 3, \"div\", 7);\r\n    ɵngcc0.ɵɵtemplate(2, NgxSpinnerComponent_ng_template_2_div_2_Template, 2, 5, \"div\", 8);\r\n    ɵngcc0.ɵɵtext(3);\r\n    ɵngcc0.ɵɵtemplate(4, NgxSpinnerComponent_ng_template_2_div_4_Template, 2, 3, \"div\", 7);\r\n} if (rf & 2) {\r\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\r\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r3.loaderTemplate);\r\n    ɵngcc0.ɵɵadvance(1);\r\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r3.loaderTemplate);\r\n    ɵngcc0.ɵɵadvance(1);\r\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r3.loadingTextTemplate);\r\n    ɵngcc0.ɵɵadvance(1);\r\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r3.isButtonSpinner && !ctx_r3.loadingTextTemplate ? ctx_r3.loadingText : \"\", \" \");\r\n    ɵngcc0.ɵɵadvance(1);\r\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r3.loadingTextTemplate);\r\n} }\r\nconst DEFAULTS = {\r\n    BD_COLOR: 'rgba(51,51,51,0.8)',\r\n    SPINNER_COLOR: '#fff',\r\n    SPINNER_TYPE: 'border',\r\n    Z_INDEX: 99999,\r\n};\r\nconst PRIMARY_SPINNER = 'primary';\r\nclass NgxSpinner {\r\n    constructor(init) {\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nclass NgxSpinnerService {\r\n    /**\r\n     * Creates an instance of NgxSpinnerService.\r\n     * @memberof NgxSpinnerService\r\n     */\r\n    constructor() {\r\n        /**\r\n         * Spinner observable\r\n         *\r\n         * @memberof NgxSpinnerService\r\n         */\r\n        // private spinnerObservable = new ReplaySubject<NgxSpinner>(1);\r\n        this.spinnerObservable = new BehaviorSubject(null);\r\n    }\r\n    /**\r\n    * Get subscription of desired spinner\r\n    * @memberof NgxSpinnerService\r\n    **/\r\n    getSpinner(name) {\r\n        return this.spinnerObservable.asObservable().pipe(filter((x) => x && x.name === name));\r\n    }\r\n    /**\r\n     * To show spinner\r\n     *\r\n     * @memberof NgxSpinnerService\r\n     */\r\n    show(name = PRIMARY_SPINNER, spinner) {\r\n        setTimeout(() => {\r\n            const showPromise = new Promise((resolve, _reject) => {\r\n                if (spinner && Object.keys(spinner).length) {\r\n                    spinner['name'] = name;\r\n                    this.spinnerObservable.next(new NgxSpinner(Object.assign(Object.assign({}, spinner), { show: true })));\r\n                    resolve(true);\r\n                }\r\n                else {\r\n                    this.spinnerObservable.next(new NgxSpinner({ name, show: true }));\r\n                    resolve(true);\r\n                }\r\n            });\r\n            return showPromise;\r\n        }, 10);\r\n    }\r\n    /**\r\n    * To hide spinner\r\n    *\r\n    * @memberof NgxSpinnerService\r\n    */\r\n    hide(name = PRIMARY_SPINNER, debounce = 10) {\r\n        setTimeout(() => {\r\n            const hidePromise = new Promise((resolve, _reject) => {\r\n                this.spinnerObservable.next(new NgxSpinner({ name, show: false }));\r\n                resolve(true);\r\n            });\r\n            return hidePromise;\r\n        }, debounce);\r\n    }\r\n}\r\nNgxSpinnerService.ɵfac = function NgxSpinnerService_Factory(t) { return new (t || NgxSpinnerService)(); };\r\nNgxSpinnerService.ɵprov = ɵɵdefineInjectable({ factory: function NgxSpinnerService_Factory() { return new NgxSpinnerService(); }, token: NgxSpinnerService, providedIn: \"root\" });\r\nNgxSpinnerService.ctorParameters = () => [];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxSpinnerService, [{\r\n        type: Injectable,\r\n        args: [{\r\n                providedIn: 'root'\r\n            }]\r\n    }], function () { return []; }, null); })();\r\n\r\n// import { trigger, state, style, transition, animate } from '@angular/animations';\r\nclass NgxSpinnerComponent {\r\n    /**\r\n     * Creates an instance of NgxSpinnerComponent.\r\n     *\r\n     * @memberof NgxSpinnerComponent\r\n     */\r\n    constructor(spinnerService, changeDetector, elementRef) {\r\n        this.spinnerService = spinnerService;\r\n        this.changeDetector = changeDetector;\r\n        this.elementRef = elementRef;\r\n        /**\r\n         * button Spinner.\r\n         * https://getbootstrap.com/docs/4.4/components/spinners/#buttons\r\n         *\r\n         * @memberof NgxSpinnerComponent\r\n         *\r\n         */\r\n        this.isButtonSpinner = false;\r\n        /**\r\n         * isButtonSpinner is true and when the spinner shown,the button disabled set to true\r\n         *\r\n         * @memberof NgxSpinnerComponent\r\n         *\r\n         */\r\n        this.autoDisableButton = false;\r\n        /**\r\n         * Spinner Object\r\n         *\r\n         * @memberof NgxSpinnerComponent\r\n         */\r\n        this.spinner = new NgxSpinner();\r\n        /**\r\n         * Unsubscribe from spinner's observable\r\n         *\r\n         * @memberof NgxSpinnerComponent\r\n        **/\r\n        this.ngUnsubscribe = new Subject();\r\n        /**\r\n         * To set default ngx-spinner options\r\n         *\r\n         * @memberof NgxSpinnerComponent\r\n         */\r\n        this.setDefaultOptions = () => {\r\n            this.spinner = new NgxSpinner({\r\n                name: this.name,\r\n                bdColor: this.bdColor,\r\n                size: this.size,\r\n                color: this.color,\r\n                type: this.type,\r\n                fullScreen: this.fullScreen,\r\n                show: this.show,\r\n                zIndex: this.zIndex,\r\n                loaderTemplate: this.loaderTemplate,\r\n                loadingTextTemplate: this.loadingTextTemplate,\r\n                autoDisableButton: this.autoDisableButton\r\n            });\r\n        };\r\n        this.bdColor = DEFAULTS.BD_COLOR;\r\n        this.zIndex = DEFAULTS.Z_INDEX;\r\n        this.color = DEFAULTS.SPINNER_COLOR;\r\n        this.type = DEFAULTS.SPINNER_TYPE;\r\n        this.size = 'default';\r\n        this.fullScreen = true;\r\n        this.name = PRIMARY_SPINNER;\r\n        this.loaderTemplate = null;\r\n        this.show = false;\r\n    }\r\n    /**\r\n     * Initialization method\r\n     *\r\n     * @memberof NgxSpinnerComponent\r\n     */\r\n    ngOnInit() {\r\n        this.setDefaultOptions();\r\n        this.spinnerService.getSpinner(this.name).subscribe(x => {\r\n            if (this.isButtonSpinner && this.autoDisableButton) {\r\n                let button = this.elementRef.nativeElement.closest(\"button\");\r\n                button.disabled = x.show;\r\n            }\r\n        });\r\n        this.spinnerService.getSpinner(this.name)\r\n            .pipe(takeUntil(this.ngUnsubscribe))\r\n            .subscribe((spinner) => {\r\n            this.setDefaultOptions();\r\n            Object.assign(this.spinner, spinner);\r\n            if (spinner.show) {\r\n                this.onInputChange();\r\n            }\r\n            this.changeDetector.markForCheck();\r\n        });\r\n    }\r\n    /**\r\n     * On changes event for input variables\r\n     *\r\n     * @memberof NgxSpinnerComponent\r\n     */\r\n    ngOnChanges(changes) {\r\n        for (const propName in changes) {\r\n            if (propName) {\r\n                const changedProp = changes[propName];\r\n                if (changedProp.isFirstChange()) {\r\n                    return;\r\n                }\r\n                else if (typeof changedProp.currentValue !== 'undefined' && changedProp.currentValue !== changedProp.previousValue) {\r\n                    if (changedProp.currentValue !== '') {\r\n                        this.spinner[propName] = changedProp.currentValue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * To get class for spinner\r\n     *\r\n     * @memberof NgxSpinnerComponent\r\n     */\r\n    getClass(type, size) {\r\n        let sizeClass = '';\r\n        switch (size.toLowerCase()) {\r\n            case 'small':\r\n                sizeClass = 'sm';\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        if (sizeClass == '')\r\n            return ['spinner-' + type];\r\n        else\r\n            return ['spinner-' + type, 'spinner-' + type + '-' + sizeClass];\r\n    }\r\n    /**\r\n     * Check if input variables have changed\r\n     *\r\n     * @memberof NgxSpinnerComponent\r\n     */\r\n    onInputChange() {\r\n        this.spinner.class = this.getClass(this.spinner.type, this.spinner.size);\r\n    }\r\n    /**\r\n     * Component destroy event\r\n     *\r\n     * @memberof NgxSpinnerComponent\r\n     */\r\n    ngOnDestroy() {\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n}\r\nNgxSpinnerComponent.ɵfac = function NgxSpinnerComponent_Factory(t) { return new (t || NgxSpinnerComponent)(ɵngcc0.ɵɵdirectiveInject(NgxSpinnerService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\r\nNgxSpinnerComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: NgxSpinnerComponent, selectors: [[\"ngx-bootstrap-spinner\"]], inputs: { isButtonSpinner: \"isButtonSpinner\", autoDisableButton: \"autoDisableButton\", bdColor: \"bdColor\", zIndex: \"zIndex\", color: \"color\", type: \"type\", size: \"size\", fullScreen: \"fullScreen\", name: \"name\", loaderTemplate: \"loaderTemplate\", loadingText: \"loadingText\", loadingTextTemplate: \"loadingTextTemplate\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 4, vars: 2, consts: [[\"class\", \"overlay d-flex flex-column justify-content-center align-items-center\", 3, \"background-color\", \"z-index\", \"position\", \"color\", 4, \"ngIf\"], [3, \"ngTemplateOutlet\", 4, \"ngIf\"], [\"loadingTemplate\", \"\"], [1, \"overlay\", \"d-flex\", \"flex-column\", \"justify-content-center\", \"align-items-center\"], [4, \"ngTemplateOutlet\"], [3, \"ngTemplateOutlet\"], [\"role\", \"status\", \"aria-hidden\", \"true\", 3, \"ngClass\", 4, \"ngIf\"], [3, \"innerHTML\", 4, \"ngIf\"], [3, \"ngClass\", 4, \"ngIf\"], [\"role\", \"status\", \"aria-hidden\", \"true\", 3, \"ngClass\"], [1, \"sr-only\"], [3, \"innerHTML\"], [3, \"ngClass\"]], template: function NgxSpinnerComponent_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵtemplate(0, NgxSpinnerComponent_div_0_Template, 2, 9, \"div\", 0);\r\n        ɵngcc0.ɵɵtemplate(1, NgxSpinnerComponent_ng_container_1_Template, 1, 1, \"ng-container\", 1);\r\n        ɵngcc0.ɵɵtemplate(2, NgxSpinnerComponent_ng_template_2_Template, 5, 5, \"ng-template\", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);\r\n    } if (rf & 2) {\r\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.isButtonSpinner && ctx.spinner.show);\r\n        ɵngcc0.ɵɵadvance(1);\r\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.isButtonSpinner && ctx.spinner.show);\r\n    } }, dependencies: function () { return [ɵngcc1.NgClass, ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet, SafeHtmlPipe]; }, styles: [\".overlay[_ngcontent-%COMP%]{height:100%;left:0;position:fixed;top:0;width:100%}\"], changeDetection: 0 });\r\nNgxSpinnerComponent.ctorParameters = () => [\r\n    { type: NgxSpinnerService },\r\n    { type: ChangeDetectorRef },\r\n    { type: ElementRef }\r\n];\r\nNgxSpinnerComponent.propDecorators = {\r\n    bdColor: [{ type: Input }],\r\n    size: [{ type: Input }],\r\n    color: [{ type: Input }],\r\n    type: [{ type: Input }],\r\n    fullScreen: [{ type: Input }],\r\n    name: [{ type: Input }],\r\n    zIndex: [{ type: Input }],\r\n    loaderTemplate: [{ type: Input }],\r\n    loadingText: [{ type: Input }],\r\n    loadingTextTemplate: [{ type: Input }],\r\n    isButtonSpinner: [{ type: Input }],\r\n    autoDisableButton: [{ type: Input }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxSpinnerComponent, [{\r\n        type: Component,\r\n        args: [{ selector: 'ngx-bootstrap-spinner', template: \"<div *ngIf=\\\"!isButtonSpinner&&spinner.show\\\"\\r\\n  class=\\\"overlay d-flex flex-column justify-content-center align-items-center\\\"\\r\\n  [style.background-color]=\\\"spinner.bdColor\\\" [style.z-index]=\\\"spinner.zIndex\\\"\\r\\n  [style.position]=\\\"spinner.fullScreen ? 'fixed' : 'absolute'\\\" [style.color]=\\\"spinner.color\\\">\\r\\n  <ng-container *ngTemplateOutlet=\\\"loadingTemplate\\\"></ng-container>\\r\\n</div>\\r\\n\\r\\n<ng-container *ngIf=\\\"isButtonSpinner&&spinner.show\\\" [ngTemplateOutlet]=\\\"loadingTemplate\\\">\\r\\n</ng-container>\\r\\n\\r\\n<ng-template #loadingTemplate>\\r\\n  <span *ngIf=\\\"!loaderTemplate\\\" [ngClass]=\\\"spinner.class\\\" role=\\\"status\\\" aria-hidden=\\\"true\\\">\\r\\n    <span class=\\\"sr-only\\\">{{loadingText}}</span>\\r\\n  </span>\\r\\n  <div *ngIf=\\\"loaderTemplate\\\" [innerHTML]=\\\"loaderTemplate | safeHtml\\\"></div>\\r\\n  <div *ngIf=\\\"!loadingTextTemplate\\\" [ngClass]=\\\"{'sr-only': isButtonSpinner,'loading-text':!isButtonSpinner}\\\">\\r\\n    {{loadingText}}\\r\\n  </div>\\r\\n  {{isButtonSpinner&&!loadingTextTemplate?loadingText:\\\"\\\"}}\\r\\n  <div *ngIf=\\\"loadingTextTemplate\\\" [innerHTML]=\\\"loadingTextTemplate | safeHtml\\\"></div>\\r\\n</ng-template>\\r\\n\", changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".overlay{height:100%;left:0;position:fixed;top:0;width:100%}\"] }]\r\n    }], function () { return [{ type: NgxSpinnerService }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }]; }, { isButtonSpinner: [{\r\n            type: Input\r\n        }], autoDisableButton: [{\r\n            type: Input\r\n        }], bdColor: [{\r\n            type: Input\r\n        }], zIndex: [{\r\n            type: Input\r\n        }], color: [{\r\n            type: Input\r\n        }], type: [{\r\n            type: Input\r\n        }], size: [{\r\n            type: Input\r\n        }], fullScreen: [{\r\n            type: Input\r\n        }], name: [{\r\n            type: Input\r\n        }], loaderTemplate: [{\r\n            type: Input\r\n        }], loadingText: [{\r\n            type: Input\r\n        }], loadingTextTemplate: [{\r\n            type: Input\r\n        }] }); })();\r\n\r\nclass SafeHtmlPipe {\r\n    constructor(_sanitizer) {\r\n        this._sanitizer = _sanitizer;\r\n    }\r\n    transform(v) {\r\n        if (v) {\r\n            return this._sanitizer.bypassSecurityTrustHtml(v);\r\n        }\r\n    }\r\n}\r\nSafeHtmlPipe.ɵfac = function SafeHtmlPipe_Factory(t) { return new (t || SafeHtmlPipe)(ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DomSanitizer, 16)); };\r\nSafeHtmlPipe.ɵpipe = /*@__PURE__*/ ɵngcc0.ɵɵdefinePipe({ name: \"safeHtml\", type: SafeHtmlPipe, pure: true });\r\nSafeHtmlPipe.ctorParameters = () => [\r\n    { type: DomSanitizer }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SafeHtmlPipe, [{\r\n        type: Pipe,\r\n        args: [{\r\n                name: 'safeHtml'\r\n            }]\r\n    }], function () { return [{ type: ɵngcc2.DomSanitizer }]; }, null); })();\r\n\r\nclass NgxSpinnerModule {\r\n}\r\nNgxSpinnerModule.ɵfac = function NgxSpinnerModule_Factory(t) { return new (t || NgxSpinnerModule)(); };\r\nNgxSpinnerModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: NgxSpinnerModule });\r\nNgxSpinnerModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [CommonModule] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxSpinnerModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                imports: [\r\n                    CommonModule\r\n                ],\r\n                declarations: [NgxSpinnerComponent, SafeHtmlPipe],\r\n                exports: [NgxSpinnerComponent]\r\n            }]\r\n    }], null, null); })();\r\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxSpinnerModule, { declarations: function () { return [NgxSpinnerComponent, SafeHtmlPipe]; }, imports: function () { return [CommonModule]; }, exports: function () { return [NgxSpinnerComponent]; } }); })();\r\n\r\n/*\r\n * Public API Surface of ngx-bootstrap-spinner\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { NgxSpinnerComponent, NgxSpinnerModule, NgxSpinnerService, SafeHtmlPipe as ɵa };\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}